#include <cstring>
#include <fstream>
#include <iostream>
#include <sstream>
#include <unordered_map>

#include "LuaJIT/dynasm/dasm_proto.h"
#include "LuaJIT/dynasm/dasm_x86.h"

#define TAPE_SIZE 30000
#define MAX_NESTING 100

#if _WIN32
#include <Windows.h>
#else
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif
#endif

#include <libbytecode.hpp>

typedef struct bf_state {
    unsigned char* tape;
    unsigned char (*get_ch)(struct bf_state*);
    void (*put_ch)(struct bf_state*, unsigned char);
} bf_state_t;

static void* link_and_encode(dasm_State** d)
{
    size_t sz;
    void* buf;
    dasm_link(d, &sz);
#ifdef _WIN32
    buf = VirtualAlloc(0, sz, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
#else
    buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
#endif
    dasm_encode(d, buf);
#ifdef _WIN32
    {
        DWORD dwOld;
        VirtualProtect(buf, sz, PAGE_EXECUTE_READ, &dwOld);
    }
#else
    mprotect(buf, sz, PROT_READ | PROT_EXEC);
#endif
    return buf;
}

static void bf_putchar(bf_state_t* s, unsigned char c)
{
    putchar((int)c);
}

static unsigned char bf_getchar(bf_state_t* s)
{
    return (unsigned char)getchar();
}

// For this I highly relied on:
// https://corsix.github.io/dynasm-doc/tutorial.html
static void (*compile(std::vector<uint8_t>& opcodes))(bf_state_t*)
{
    // clang-format off
    dasm_State* d;
    unsigned npc = 8;
    unsigned nextpc = 0;
    int nloops = 0;
    const char* loops[MAX_NESTING];

    // Setup dynasm
    |.if X64
    |.arch x64
    |.else
    |.arch x86
    |.endif

    |.section code
    dasm_init(&d, DASM_MAXSECTION);

    |.globals lbl_
    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    |.actionlist bf_actions
    dasm_setup(&d, bf_actions);
    dasm_growpc(&d, npc);

    |.if X64
    |.define aPtr, rbx
    |.define aState, r12
    |.define aTmp, rax
    |.define aTmpByte, al
    |.if WIN
        |.define aTapeBegin, rsi
        |.define aTapeEnd, rdi
        |.define rArg1, rcx
        |.define rArg2, rdx
    |.else
        |.define aTapeBegin, r13
        |.define aTapeEnd, r14
        |.define rArg1, rdi
        |.define rArg2, rsi
    |.endif
    |.macro prepcall1, arg1
        | mov rArg1, arg1
    |.endmacro
    |.macro prepcall2, arg1, arg2
        | mov rArg1, arg1
        | mov rArg2, arg2
    |.endmacro
    |.define postcall, .nop
    |.macro prologue
        | push aPtr
        | push aState
        | push aTapeBegin
        | push aTapeEnd
        | push rax
        | mov aState, rArg1
    |.endmacro
    |.macro epilogue
        | pop rax
        | pop aTapeEnd
        | pop aTapeBegin
        | pop aState
        | pop aPtr
        | ret
    |.endmacro
    |.else
    |.define aPtr, ebx
    |.define aState, ebp
    |.define aTmp, eax
    |.define aTmpByte, al
    |.define aTapeBegin, esi
    |.define aTapeEnd, edi
    |.macro prepcall1, arg1
        | push arg1
    |.endmacro
    |.macro prepcall2, arg1, arg2
        | push arg2
        | push arg1
    |.endmacro
    |.macro postcall, n
        | add esp, 4*n
    |.endmacro
    |.macro prologue
        | push aPtr
        | push aState
        | push aTapeBegin
        | push aTapeEnd
        | mov aState, [esp+20]
    |.endmacro
    |.macro epilogue
        | pop aTapeEnd
        | pop aTapeBegin
        | pop aState
        | pop aPtr
        | ret 4
    |.endmacro
    |.endif

    // Verify that the right flags are used
    ||#if ((defined(_M_X64) || defined(__amd64__)) != X64) || (defined(_WIN32) != WIN)
    #error "Wrong DynASM flags used: pass `-D X64` and/or `-D WIN` to dynasm.lua as appropriate"
    #endif

    // Start emiting setup code
    |.type state, bf_state_t, aState

    dasm_State** Dst = &d;
    |.code
    |->bf_main:
    | prologue
    | mov aPtr, state->tape
    | lea aTapeBegin, [aPtr-1]
    | lea aTapeEnd, [aPtr+TAPE_SIZE-1]



    for (uint64_t i = 0; i < opcodes.size(); i++)
    {
        // std::cout << instructionPointer << " -> " << dataPointer << std::endl;
        switch (opcodes.at(i)) {
        case OP_MOVE: {
            int8_t n = readByteArgument(opcodes, i);
            | add aPtr, n
            break;
        }

        case OP_INC: {
            int8_t offset = readByteArgument(opcodes, i);
            int8_t increment = readByteArgument(opcodes, i);
            | add byte [aPtr + offset], increment
            break;
        }

        case OP_OPEN: {
            // Skip over the argument
            readEightByteArgument(opcodes, i);

            if(nextpc == npc) {
                npc *= 2;
                dasm_growpc(&d, npc);
            }

            // If the byte at the datapointer is not zero we don't do anything
            | cmp byte [aPtr], 0
            | jz =>nextpc+1
            |=>nextpc:
            loops[nloops++] = (char*)nextpc;
            nextpc += 2;
            break;
        }

        case OP_CLOSE: {
            uint64_t _argument = readEightByteArgument(opcodes, i);
            --nloops;
            | cmp byte [aPtr], 0
            | jnz =>loops[nloops]
            |=>loops[nloops]+1:

            break;
        }

        case OP_CLEAR: {
            | mov byte [aPtr], 0
            break;
        }

        case OP_MUL: {
            int8_t offset = readByteArgument(opcodes, i);
            uint8_t factor = readByteArgument(opcodes, i);
            int64_t target = (int64_t)offset;

            if (factor == 1) {
                | mov aTmpByte, [aPtr]
                | add [aPtr + target], aTmpByte
            } else {
                | mov aTmp, factor
                | imul aTmp, [aPtr]
                | add [aPtr + target], aTmpByte
            }

            break;
        }

        case OP_WRITE:{
            | movzx r0, byte  [aPtr]
            | prepcall2 aState, r0
            | call aword state->put_ch
            | postcall 2
            break;
        }

        case OP_READ:{
            | prepcall1 aState 
            | call aword state->get_ch
            | postcall 1
            | mov byte [aPtr], al
            break;
        }

        default:
            std::cerr << "ERROR: Unknown opcode!" << std::endl;
            exit(1);
        }
    }

    | epilogue
    link_and_encode(&d);
    dasm_free(&d);
    return (void (*)(bf_state_t*))labels[lbl_bf_main];
    // clang-format on
}

int main(int argc, char const* argv[])
{
    // Read input file
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " INPUT" << std::endl;
        exit(1);
    }

    std::ifstream in(argv[argc - 1]);
    std::string source(static_cast<std::stringstream const&>(std::stringstream() << in.rdbuf()).str());

    // Compile the code to bytecode
    auto opcodes = compileByteCode(source);
    if (argc > 2) {
        printByteCode(opcodes);
        std::cout << opcodes.size() << std::endl;
        exit(0);
    }

    // Compile to machine code
    bf_state_t state;
    uint8_t array[TAPE_SIZE];
    std::memset(array, 0, TAPE_SIZE);
    state.tape = array;
    state.get_ch = bf_getchar;
    state.put_ch = bf_putchar;
    compile(opcodes)(&state);

    // Setup the datastructure
    // uint32_t dataPointer = 0;
    // uint64_t instructionPointer = 0;

    // Run native code
    // FIXME: Implement
}